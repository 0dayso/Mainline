#include "StdAfx.h"
#include "PrinterDecrypt.h"
#include "ZBase64.h"
#include <string>
#include <regex>
#include "Global.h"

#import <msxml3.dll> named_guids  //导入动态库，装了IE5就有
using namespace MSXML2;     //引用命名空间，一般可以把命名空间理解成类和接口的集合

using namespace std;
using namespace std::tr1;

static UINT _pbos[] =
{
    0xD569BF55,0x012A93EA,0x40DC9A66,0x37F7E6CE,0x6EC28A51,0xCB8907C8,0x961777C7,0x26A851B4,
    0xD1804FFA,0xEF9C8446,0x5BB22498,0xCB2A6EF5,0x3B59CC48,0xAA283910,0x33B67D98,0x67AB9E18,
    0xB6C4FC9F,0x1EFBB96A               
};

static UINT _sbox1[] = 
{
    0x96AD35B7,0x922D30E6,0xF3943C2D,0x450E1193,0x0F88D201,0xCD8B2F34,0xB15151AF,0xC23AC486,
    0x39BDBB11,0x4C0DF587,0xF3C20FFF,0xCF973400,0xAC113899,0x16EC4BFC,0xA0C9339D,0x54E2521B,
    0x0E5B56C9,0xEBDF634C,0x79EB1541,0x699E9498,0xAA49D7E5,0xB261A63D,0x233E5F1A,0xC556C6D7,
    0x0512003B,0xDACFD557,0xBC9AEA2D,0x53B30687,0xDDBFF294,0x028193A8,0x22EBCDDD,0x1AE9CE18,
    0x8A0F8FF1,0x2B274431,0x93FAB735,0x73504298,0x7473C2EB,0xEB421160,0xB34D39D4,0x232DE7C4,
    0x0319EEB5,0x22947318,0xB06DF8F9,0xC4787964,0x52D30E23,0x1D1B9363,0xB6836C37,0x1661A448,
    0x419B6767,0x3413E3CB,0x2FC193F5,0x412F5115,0x1F0BC351,0x983C66F8,0xE607E884,0xAC4D4A2A,
    0x81DA533E,0x53BA2F15,0xC066F424,0x5DFEAB0A,0x69CA8BBC,0xBCD92AF1,0xF566E101,0x98A0D4AA,
    0x33E2856B,0x431B2346,0x030E71F3,0xF80AD472,0xD608F8D9,0xA31375B3,0xFA51D09C,0xA91F521E,
    0x510BDFF1,0x5E2C80BA,0xEE32C978,0x6A10349C,0x427A9E5D,0x81A87FBE,0xDA4F6145,0xB5E5F9A5,
    0xB0118FEC,0x2379A98D,0x83077B89,0x22D5F0B3,0xD78916F1,0x1B40E418,0xC25E2A5C,0x94BEE422,
    0x03E7B96B,0x54DD70EE,0xD4F93728,0x31859759,0x28ADDFE5,0x78BAFD08,0x78B9E41E,0xA6CC7689,
    0x6F0C0452,0x1310752B,0xB71B9336,0xF387CA1A,0xFCFE984C,0xD1C668A9,0x0664FF68,0x6ED5C4F6,
    0x47B299DF,0x903C5007,0x85280693,0x26814D0C,0x1DA4EC7C,0xF8CF2B3E,0x2938FD3C,0x05E913DD,
    0xC5C8D51A,0x415A3ACD,0x7C33D860,0x5B3A5B56,0x2821EB89,0x4DC8955D,0x4A41FE24,0x3B03DDD8,
    0x093B8BC1,0xDE258047,0xF7F6141F,0x6ED27219,0xADE525CA,0x8A011CA7,0xD28BF21C,0x2CB14071,
    0x10602504,0x3A3DFD4E,0x29D556E0,0x7DF0AF3F,0x653440BA,0x124E66AC,0x112D3DD8,0x5794E815,
    0xB28EC911,0x625CF8F3,0x89FA261E,0x36ACBC1C,0xDDEFBFD6,0x71F1395B,0x06A7056E,0x6263FFD1,
    0xA34F7C21,0x09CE430D,0x39063BE8,0xA27CD469,0x6116967E,0x5CD1FA03,0xA1E69775,0x758476C6,
    0x2672AFF0,0xC81D0618,0xE6C62DAA,0x1DD36E01,0x351BC7DE,0xA3C0AFDE,0x04657BBF,0xC8C2F4F1,
    0xA0C55B1B,0x8BEB4B00,0x23F832D0,0xEB4A89D0,0x4F3078CD,0xB804E390,0x825EF7BE,0x92CA3999,
    0xE10A64D9,0xC878A080,0x4764B643,0x079C5F8C,0x5D49ACF7,0x562F8CDF,0xD2CAC678,0x4C1DA75C,
    0xB8BB5467,0x62F8B2F3,0x324C6EF4,0xE3F505BE,0x9FFE0614,0x37835E3A,0x949BC61A,0x1DC15166,
    0x73F9F344,0x6480B2AD,0x7730ABCE,0x89BCF0D9,0xA29C6897,0x94B31441,0x2CE325A6,0xC84E1B0B,
    0xAEB0B3DD,0xB264802C,0xF8390BAA,0x9680A615,0x09438CCB,0x1D3FEA0E,0xD82CC41D,0x281CCA69,
    0x2E59FC0E,0xBDF313C5,0x4F64EDBC,0x7E4DC76F,0xD26FC711,0x12BDAB43,0x4F0F9D99,0x0C7C8EE5,
    0x27BE228D,0x4E97ABAA,0x4FA32863,0x82B866AA,0x41755E2D,0x4D6302DA,0xB67409A6,0xAEF8ABCB,
    0xFF573F49,0xE82BA345,0x65717135,0xF63E0A9A,0x194A4C73,0x0AB8A803,0xDC45B28E,0xF0647A04,
    0x1B4DA39D,0xA938A108,0x3A44039B,0xCF4FC604,0xA02F5377,0xFED53C6F,0x9FAC7329,0xE555E690,
    0x748CBF34,0xC3EAAF59,0x7F1EB015,0x00B21C8A,0xFCDE6FA1,0x707D2536,0xE12D2A27,0x324C7C68,
    0xA76697F3,0xC285558C,0x0C0BAF8B,0x95304465,0xC264184D,0xD503C9ED,0xFDECD015,0x8F2AEBF8,
    0xF3F2255A,0x9E6C8055,0x69291B19,0x99E3B5ED,0xD6FA6961,0xBF662BD0,0x5648E805,0xC57E89C0
};

static UINT _sbox2[] =
{
    0xD10AD6D0,0xC261DE7D,0x9022A966,0xCE723574,0xF5621CC8,0xA794B224,0xB92A20D4,0x16E80664,
    0x521AC770,0xB58735EB,0x57EF149C,0x75A382F9,0x5A17E6F7,0xEBE733AE,0x047C77E5,0x0E4B29A1,
    0xC68A8482,0xEC9870E4,0xB485B189,0x5AD725F1,0x73F2C71A,0xDB0165DA,0x4D55C1FC,0x1BECD74F,
    0x8DA5C3A4,0x2F32889C,0x1A915CD1,0x6EA76839,0xCEA47D8A,0xD4947FB0,0x4434CD31,0xEEA9C392,
    0xDDC3A75F,0xEF811FB1,0x5E718E02,0x8008DE41,0x7D5B5A60,0x51E200A5,0x6412F0FF,0xC88F5570,
    0x4E24BEB3,0x533B2965,0x63C32556,0x4420B41C,0x93BD4F72,0x48DF9A20,0x88766381,0x63F2B3A0,
    0x68884C2F,0x3CE7A979,0xAC5EFEC9,0xE208D8B0,0x3BBD98F2,0x86ADC73E,0xFFFD3983,0x08D7F0EB,
    0xC12AD38A,0x9E8C4BD7,0xABAD8EB4,0x6A741191,0x347331BB,0xE1959F56,0xE2C8C025,0x045C7B9F,
    0xAD718677,0x519E35EA,0xA53AF6EB,0xBBB19AD0,0xEA9EB400,0x64EC3F84,0x22A95275,0x7B2317B5,
    0xE0AF85DB,0xB712DE65,0x624B2560,0x1F55EAE6,0x0871A486,0xDEB6EDD7,0xF9742309,0x2403CBCE,
    0x4F36DEB2,0x61A4020C,0x956B4624,0x41FC4C7C,0xECED9BD7,0xAB69808D,0x55D4D8FF,0x427B223D,
    0x1CEDC749,0xD12215D7,0x6409EC0C,0x5461E243,0x7972F295,0x8D6A1790,0x50A5C39C,0xECE927D0,
    0x4DEDAB39,0xAE25CD77,0x2C0C1A79,0x933D6B9D,0x31A8C69D,0xD3BA0C5A,0x0DD16922,0x03D9CC9A,
    0xF06752AE,0x9E357677,0xC17AFDEB,0x1DFF033C,0x0E372C61,0x2FAFACFF,0xBCC06814,0xBE112D83,
    0xA3F83CAD,0xFDA8DC4F,0xD8C201B9,0xA0ABA8A6,0xFC317720,0xF8808AB9,0x5AAF60F3,0x0CE66BFB,
    0x1DF5B320,0xED8476CE,0xCDD3E1D9,0x36BC5CAB,0x02C60720,0x389086B2,0x883396D2,0x4D52ACB7,
    0xAFE765BA,0xCB6DD370,0x1A269C52,0x9FEED475,0x19F1D755,0xE6F4BD8B,0xDCBAC5F7,0x0D435EC7,
    0xC6CDA37E,0x02C289D7,0x61EC53AC,0xE850CD72,0x576E203C,0x3BFB7897,0x2B96F76C,0xC3CFB9C6,
    0x04CCFA14,0xC7985195,0x763FD3E4,0x9E112FA7,0x457C052F,0xA5AFF4D7,0x4E7C91AC,0x9A97FA14,
    0x91661166,0x595A7ED6,0xFAB4D660,0x6E314535,0x8E600D59,0xAECDEAAB,0xFC0CD46F,0xB44C743D,
    0x5F275A82,0xE19BFC85,0x1AAFF880,0x0EFD9F32,0x1DC3477A,0x98966991,0x68F4D4C7,0x43F92B52,
    0x471029A0,0x73979A0A,0x5F05A42D,0xCADEC657,0x224B7A1B,0x90F00A3D,0xE5BD3D37,0x1CD0F315,
    0xD0A654A7,0x0CD533CA,0x67EAB247,0x94855A9D,0x5FBB6AEC,0x1A4990DE,0x59F65E85,0x93FAEA17,
    0x455D5205,0x137A1B98,0x34C26359,0xF51E035B,0xD0833931,0xF12E4670,0x00ECC1A3,0x37E802EA,
    0xD3CCE786,0x7F4B9725,0xBBA96475,0x318EAD5F,0xC129E326,0x2C1CA762,0x06A31B41,0x20C5421D,
    0xC03BA7B6,0x716857C1,0x38B46019,0x5ED97226,0x39661D34,0xF2403E1B,0x3C853F88,0xE556067A,
    0x58C0881A,0xBB00A9B7,0x6961E879,0x3A292012,0x1A275417,0xA755C0D0,0x7472E9D7,0x55AA8CE6,
    0xB5734137,0x1F4514B5,0x477A5825,0x9ECFF9A4,0xEA5AA72D,0x5DFAF6EA,0x66503AC8,0x85CF87AA,
    0xC23279D3,0xD824BDB3,0x7DFA8A0E,0xB5F12FB8,0x00856CBF,0x02319959,0xA17FCF3A,0xA22337B6,
    0x0BD4A7B4,0x8C3E3A02,0x5B846630,0xAA81739A,0xF9A3E2C9,0x0905CA3D,0x329FDCEB,0xDDE6FF74,
    0xAA25CA01,0xC70642D9,0x3A4B6E4D,0x6D20B54C,0x46C99625,0x7C6A489B,0x52BF1CBF,0xD2FF949E,
    0xBD491CD7,0x2C954FCB,0x13130961,0x8AB4595C,0xCBAB9847,0x6C5B4A03,0x5A538E8E,0xAC280CB4
};
static UINT _sbox3[] =
{
    0xD23F126B,0xCE458966,0x538A4B3E,0xBF996D53,0x93042599,0xB847B194,0xB3D8083A,0xC93A8837,
    0xF0416F42,0xDD5BC306,0xB598BA7C,0x55796BFA,0xF5528DCB,0x5F4D7746,0x5E1D61D8,0x12C89AC9,
    0xCCB89F47,0xFC1EA1F3,0x27AEA206,0x20CF6070,0xAE104AFD,0xBFC40C64,0x48F0A8A6,0x434BCF2B,
    0xC41C0BB6,0xC9C11F42,0x4E6602B2,0x2A13917F,0x282EDB3E,0xA3FA5DC3,0xBB456F19,0x1C21CAE5,
    0x7AAC8A5E,0xA41FAFD3,0x2DE4E9D7,0x2B76B938,0x5AFCB3A7,0xF00F78B7,0x3D35F0AE,0x42F96066,
    0x66CFACCA,0xB00561A0,0xA30026E6,0xBFABEC03,0x2BC746CB,0xDC4C0EAE,0xD13E6A59,0xCA404815,
    0x432E1C2B,0x229895D3,0x72296E2E,0x23CFD5E3,0xC231498D,0x0E687E3D,0xDC6D3BB5,0xDC0AA2AC,
    0xCC8D67F9,0x521D8D54,0x8E560CD6,0x1FFFA9DD,0xCE41A45E,0x42EE9946,0xDE583046,0xC48B4849,
    0x8C563680,0x723BE592,0x0E1BF6F9,0xE926F3F4,0xB91FCF22,0x04B66E25,0x88585F30,0xBC4A7C47,
    0xE1C09BA2,0x6583C619,0x9BE38EE6,0x70BF02FA,0x58A6C0A4,0xBAF50A40,0x473A1676,0x95937029,
    0x4358CFFC,0x55EC5C60,0x265085EE,0x301A945E,0x6EB387F3,0x411C8C2B,0x815ABF54,0x91A0BB11,
    0x130E80E1,0x5A7584BD,0xD6DFF411,0x15333E6A,0x149C1FF2,0xFE052698,0xE2576F9D,0xA32017C6,
    0xE3A26992,0x8D52F769,0xBAE93A22,0xC0A3E749,0x2925F39D,0x2EA814A7,0x52EA1CE2,0x7953B477,
    0x4B0E0BFE,0x50594FCA,0x8E032AF0,0x9CEAE7F4,0x51AD131E,0xF8439811,0x4B9A859A,0x9B344C6F,
    0x7D0F4516,0xDA99867F,0xC98FFD0F,0xCFF6F41A,0x028ADFF5,0x8421EF83,0x5485FDA2,0x2D35A722,
    0x2FA5C0E0,0x7364C889,0xF07EDD20,0xD54792A1,0x29CE5A1A,0x268FBB48,0x8CBC96E3,0x451BC6C1,
    0x5D185C8D,0x39F3A794,0x4CBD6FE3,0xDE35B0FC,0x5385AEA5,0xC166BFDB,0x762969E9,0x669164BD,
    0x11412505,0xED506058,0x870357B4,0x4B7B22D6,0xC4FC7848,0xB5C668AF,0x792C90C8,0x4F3A072A,
    0x93C86FA4,0xBD829DE9,0x2DEAF86D,0x29315F82,0x5F9FE854,0x0C47F016,0x5017FD42,0x95D02E0E,
    0x91287A16,0x5542BCC9,0xDED29CD0,0x9DD9EA50,0x96F628C7,0x3ADF885A,0xCE7F9584,0x6404001B,
    0x2A1FBF1B,0x2971CC84,0x100B29FE,0xBF1DA9C7,0xBB4EEA2A,0xF9217868,0x65C59B0D,0xE68C6848,
    0xF2D829B8,0x0D63D57E,0x411D9EAB,0x41351C64,0x9AC5118D,0x130A9938,0x6BFCA485,0x8C16987B,
    0x712FFEED,0x464616C5,0x86AEFE46,0xCF427F4C,0x6CF0BFB3,0x2B5DD462,0x381DCBF5,0x568F7798,
    0xBA73EC08,0xEBE182E3,0x751FC09C,0x086A1112,0xB9825E5E,0xBA77A786,0x0BC7EDC4,0xD508EB32,
    0x06BD5282,0x4BAC1DB9,0x2CF30DB6,0xFECE2E8C,0x499EE6C1,0xFFB75507,0x30664199,0x259FF5F6,
    0x9D9FF969,0x5A94FB8B,0x28E98D7D,0xE6FD34ED,0xEA140F12,0x12BEB5A8,0x87B675A1,0xF8E56E39,
    0x39A1B68F,0x20B0F336,0x3C16B4C9,0x80FA6E7D,0x40A3AE3A,0xFC3E2D3F,0xBEE0593C,0x398FBBB9,
    0x48B20512,0x410A79B2,0x87A53188,0xCC4CBACD,0x10597DB9,0xAD582D05,0xC98E5C5C,0xF4303B7C,
    0x8EB8117A,0x585C5296,0x3F33DF35,0x905696E7,0x1404667B,0x47603200,0x455122B9,0xB09D4DCB,
    0x7C5CABBA,0x3E9C0C50,0x93656B92,0xC9AB82A3,0xD71BCA8A,0xFA35C758,0x63861AD9,0x296C94F6,
    0x3F663523,0x175B0429,0x8E028C26,0xF5356380,0x77307AF7,0xAA7C5F45,0x52408524,0xD6DB3474,
    0x525802B3,0x41B00FFB,0xE1DF4344,0xE6FA4FC8,0x27F496AD,0x5A1EBEBA,0x2FD632A4,0x9E336D52
};

static UINT _sbox4[] = 
{
    0x07D58BBB,0x4A6EC64E,0xA3EF3F4A,0x71730E25,0x777C5544,0x02E886F4,0x170B55C4,0x756C5F54,
    0x4175C296,0x38EEC61A,0xA19EF587,0x2D26CC76,0x7DC692AD,0x7B11C5C5,0xB72AF9AB,0xE749366A,
    0x2ACA1894,0x82F33D45,0x2B7C157B,0xE45C4179,0x71D9AB04,0x2361331B,0x7D01B102,0x02F4FC66,
    0x7695561C,0xC555EF72,0xDB5404D5,0x19F54F30,0xEB50B25B,0xE006C1AE,0x0E842804,0xE5D3BE2B,
    0xCF8790A4,0x54F3480B,0xC22EC343,0xDCFEB843,0x3C6A01B6,0x433F190A,0x93A00239,0xC243B5B8,
    0x43C39291,0x2D506B69,0x06A2A1C0,0x4373EA2D,0x3FC45465,0x5A9CA80E,0x2E07D231,0x9CD87021,
    0x0F18852C,0x23A8996D,0xFD56D8B7,0x65F10C7F,0x58F0F81F,0x652AB256,0xD7D593B5,0xB1D74255,
    0x2FB141A7,0x144A2E8B,0xF85CA3B8,0x854CD8D1,0x4522DD56,0x782601A9,0x7A13902D,0x608C2D23,
    0x788EFF1D,0x74742F88,0xA86D7447,0x513FDB91,0xAAAAF793,0x5C49752F,0x1D4F69C4,0x3DC4591B,
    0x976EFBB0,0x154B0769,0x3C07BC0D,0x8088E5D0,0x60B1665B,0x0175DBF2,0xDB1A036D,0x7218D74B,
    0xEFE2B901,0xBB701084,0x0A38068F,0x94319E3D,0xFAAE4B42,0xC725D19C,0xEACE8690,0x0D150B2F,
    0xA6ED6A0C,0xDC2312C7,0x1B941AAD,0xD1CB0285,0x59AF41DD,0x2C3CC7F2,0x88B81A1B,0x77B4EC90,
    0x64B6FBB5,0xE640DE6C,0x683D5BDF,0xFBEC35C6,0xBFFCEBDC,0xC195FDD7,0x5B46193A,0xB54AB648,
    0x22C5A788,0xC5DB0C2D,0x0FDBEF01,0xEC422F03,0x5FEFBFD8,0xC7DE03FD,0xEF415531,0x738FC3CD,
    0x5B151959,0x68729D34,0xC5D159A4,0xB33390E9,0x2F2C37A0,0x40EC58A1,0xD1A540B7,0x306AF34A,
    0x1EDD5324,0xAA757DBD,0x72312C12,0xEB33FAF9,0x6C2FC696,0xEA68FFA6,0xCA68AD60,0xFC2064C1,
    0x2CD701B9,0xE3129636,0x7A08D1AF,0x996ECB5D,0x0BFFCD47,0xCD1A1E66,0x3B339A6C,0x9B581657,
    0x4F41C703,0x388A6707,0xF60A5D59,0x9ED8EDCD,0x6FB06035,0xDFED2ADD,0x183E052D,0x5416C80A,
    0x48AB92E3,0x7A4A9A02,0x5CB417F2,0x4802DF57,0x45DFE5C6,0xD46D7A8E,0xBC39C123,0xBCD4DA65,
    0x1C1BA032,0x50D0BF44,0x81F242B6,0x5F855504,0x55D353EA,0x5112E66B,0x51DCF675,0x611F0359,
    0xF37F4A2C,0x26B92A74,0x6D6A27C5,0xB2B645FE,0xB9E1006E,0xE3D24202,0x7221382E,0x1BFEDB35,
    0xEB33D771,0x954F4CC6,0x94E636D0,0xE3A96A25,0x60CA5030,0xD7144DA6,0xC5F24088,0x3DD665A6,
    0xCE9A2628,0x4F03E798,0xB302B803,0x241A451B,0x35114919,0x7B574085,0x794068FD,0x2614F911,
    0x7E66DB31,0x9A3573D5,0x3D2F9C1D,0x2882F6F5,0x8F70ED04,0xACD08546,0xA70117A2,0xB4C11CC3,
    0x29CE905C,0x486885A4,0x57D34EFF,0x8590CDA4,0x98C43E58,0x4E9F7E3B,0xCCD3AA43,0x4AB8EB14,
    0x60348E66,0xFABA3DAD,0x990887A5,0x5BB83311,0xC69C11DC,0x3B4A3666,0xBAB322FF,0xD5B38C89,
    0x7FF43C13,0x42653E99,0xCF122824,0xF74AD7F1,0xF579F470,0x6C6387BC,0x9FA025BF,0x5F4134BA,
    0x2EAE3498,0x10D72FD3,0x9E736641,0xA28B8054,0x7061015F,0xB72BC659,0x23BA2B54,0x83AA6566,
    0x3CD1B24F,0xB118EA9C,0x467351A7,0x7175EBE1,0x8193BAFF,0x6AB66C0E,0x9301F185,0x2C5B0882,
    0xAC788541,0x4F47FDC7,0x7BF1EEF9,0x33296888,0x3ADC6A85,0x27516C03,0xE8125E56,0xC9958184,
    0xCD938CEC,0x3F2A54A0,0x0696233A,0x620B5800,0x8B9BB958,0x65995A4B,0xB19B6FAF,0xB8BCAD7E,
    0x6AA0C5F7,0x5B1859AE,0xF64C1F30,0x9BDDC92D,0x406949FA,0xBC80BA9F,0x7FF3684C,0xB6755B43
};

CPrinterDecrypt::CPrinterDecrypt(void)
{
}

CPrinterDecrypt::~CPrinterDecrypt(void)
{
}

BYTE* CPrinterDecrypt::sub_00401920(UINT iHi, UINT iLow)
{
	__try
	{
    BYTE* lst=new BYTE[8];
	memset(lst,0,sizeof(lst));
	
    for (int i = 0; i < 16; i++)
    {
        UINT iHReult = iHi ^ _pbos[17 - i];
        UINT iLReult = sub_00401B00(iHReult) ^ iLow;
        iHi = iLReult;
        iLow = iHReult;
    }
    iLow ^= _pbos[0];
    iHi ^= _pbos[1];

    BYTE* bHi = IntToByteArray((int)iHi);
    BYTE* bLow = IntToByteArray((int)iLow);

    BYTE bHiE[]  = { bHi[3], bHi[2], bHi[1], bHi[0] };
    BYTE bLowE[] = { bLow[3], bLow[2], bLow[1], bLow[0] };
	
	
	memcpy(lst,bLowE,4);
	memcpy(&lst[4],bHiE,4);
	
	delete[] bHi;
	delete[] bLow;

	return lst;
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

UINT CPrinterDecrypt::sub_00401B00(UINT idata)
{
	__try
	{
    return (((_sbox1[(BYTE)idata]) +
           (_sbox2[sub_0042e720(idata, 8)])) ^
           (_sbox3[sub_0042e720(idata, 16)])) +
           (_sbox4[sub_0042e720(idata, 24)]);
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

UINT CPrinterDecrypt::sub_0042e720(UINT idata, int ibits)
{
	__try
	{
    UINT result;
    if (ibits >= 0x20)
    {
        result = 0;
    }
    else
    {
        result = (idata >> (char)ibits)&0xFF;
    }
    return result;
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}


//Byte[]到int转换
int CPrinterDecrypt::ByteArrayToInt(BYTE* buffer, int nStartIndex)
{
	__try
	{
    if (sizeof(buffer) < 4 || (sizeof(buffer) - nStartIndex) < 4)
    {
        return 0;
    }
    else
    {
        return (int)buffer[nStartIndex] << 24 |
            ((int)buffer[nStartIndex + 1] & 255) << 16 |
            ((int)buffer[nStartIndex + 2] & 255) << 8 |
            ((int)buffer[nStartIndex + 3] & 255);
    }
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

BYTE* CPrinterDecrypt::IntToByteArray(int iValue)
{
	__try
	{
    BYTE* buffer=new BYTE[8];
	memset(buffer,0,sizeof(buffer));
    buffer[0] = (BYTE)(iValue >> 24);
    buffer[1] = (BYTE)(iValue >> 16 & 255L);
    buffer[2] = (BYTE)(iValue >> 8 & 255L);
    buffer[3] = (BYTE)iValue;
    return buffer;
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}


long CPrinterDecrypt::ByteArrayToLong(BYTE* buffer, int nStartIndex)
{
	__try
	{
    if (sizeof(buffer) < 8 || (sizeof(buffer) - nStartIndex) < 8)
    {
        return 0;
    }
    else
    {
        return (long)buffer[nStartIndex] << 56 |
            ((long)buffer[nStartIndex + 1] & 255L) << 48 |
            ((long)buffer[nStartIndex + 2] & 255L) << 40 |
            ((long)buffer[nStartIndex + 3] & 255L) << 32 |
            ((long)buffer[nStartIndex + 4] & 255L) << 24 |
            ((long)buffer[nStartIndex + 5] & 255L) << 16 |
            ((long)buffer[nStartIndex + 6] & 255L) << 8 |
            (long)buffer[nStartIndex + 7] & 255L;
    }
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

BYTE* CPrinterDecrypt::LongToByteArray(long lValue)
{
	__try
	{
    byte buffer[8];
    buffer[0] = (byte)(int)(lValue >> 56);
    buffer[1] = (byte)(int)(lValue >> 48 & 255L);
    buffer[2] = (byte)(int)(lValue >> 40 & 255L);
    buffer[3] = (byte)(int)(lValue >> 32 & 255L);
    buffer[4] = (byte)(int)(lValue >> 24 & 255L);
    buffer[5] = (byte)(int)(lValue >> 16 & 255L);
    buffer[6] = (byte)(int)(lValue >> 8 & 255L);
    buffer[7] = (byte)(int)lValue;
    return buffer;
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

void CPrinterDecrypt::LongToIntArray(long lValue, int* buffer, int nStartIndex)
{
    buffer[nStartIndex] = (int)(lValue >> 32);
    buffer[nStartIndex + 1] = (int)lValue;
}

long CPrinterDecrypt::MakeLong(int nLo, int nHi)
{
    return (long)nHi << 32 |
        (long)nLo & 0xffffffffL;
}

CString CPrinterDecrypt::Decrypt(CString strInput)
{
	__try
	{
		USES_CONVERSION;

		char* szBuf = T2A(strInput);

		ZBase64 base;
		int outByte = 0;
		string base64Str = base.Decode(szBuf, strlen(szBuf), outByte);		
		
		BYTE bstr[12048];
		memset(bstr,0,sizeof(bstr));
		memcpy(bstr, base64Str.c_str(), base64Str.length());
	
		BYTE lstResult[12048];
		memset(lstResult,0,sizeof(lstResult));
		UINT nPos=0;
	
		for (int i = 0; i < sizeof(bstr); i += 8)
		{
			BYTE bLeft[]  = { bstr[i + 3], bstr[i + 2], bstr[i + 1], bstr[i + 0] };
			BYTE bRight[] = { bstr[i + 7], bstr[i + 6], bstr[i + 5], bstr[i + 4] };

			int iHi = ByteArrayToInt(bLeft, 0);
			int iLow = ByteArrayToInt(bRight, 0);
			BYTE* lResult=sub_00401920((UINT)iHi, (UINT)iLow);

			memcpy(&lstResult[nPos],lResult,8);
			nPos+=8;
			delete[] lResult;
		}
	    
		return CString(lstResult);
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}

bool CPrinterDecrypt::ConvertXmlToHtml(CString xml,CString fileXSLName,CString& strRet) 
{ 

	bool bRet=true;
	__try
	{

		MSXML2::IXMLDOMDocumentPtr   m_pXMLDoc; 
		MSXML2::IXMLDOMDocumentPtr   m_pXSLDoc; 
		_bstr_t   fileName; 
		variant_t   value; 
		variant_t   vResult; 
		_bstr_t   strBuffer; 

		CoInitialize(NULL);                                     //初始化模块库； 

		//载入XML文件 
		//fileName=fileXMLName.AllocSysString(); 
		HRESULT   hr=m_pXMLDoc.CreateInstance(MSXML2::CLSID_DOMDocument); 
		if(FAILED(hr)) 
		{ 
		//AfxMessageBox( "创建XML文档失败 "); 
		bRet=  false; 
		} 
		vResult=m_pXMLDoc->loadXML(xml.AllocSysString()); 
		if((bool)vResult==FALSE) 
		{ 
		//AfxMessageBox( "载入xml   dom文件失败 "); 
		bRet =   false; 
		} 

		//载入xsl文件； 
		fileName=fileXSLName.AllocSysString(); 

		hr=m_pXSLDoc.CreateInstance(MSXML2::CLSID_DOMDocument); 
		if(FAILED(hr)) 
		{ 
		//AfxMessageBox( "创建XSL   dom文档失败 "); 
		bRet =   false; 
		} 
		vResult=m_pXSLDoc-> load(fileName); 
		if((bool)vResult==FALSE) 
		{ 
		//AfxMessageBox( "载入xsl文件失败 "); 
		bRet =   false; 
		} 

		strBuffer=m_pXMLDoc-> transformNode(m_pXSLDoc); 
		/*ofstream   outFile( "C:\\temp.html "); 
		outFile < <(LPCTSTR)strBuffer;*/ 
		strRet=CString((LPCTSTR)strBuffer);

		m_pXMLDoc.Release();           //释放职能指针； 
		m_pXSLDoc.Release(); 
		CoUninitialize();
                                                                                     //模块反初始化； 
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
	return  bRet; 
} 




void CPrinterDecrypt::AppendInfo(wstring& strData)
{	
	__try
	{
		
	wregex regCompany(_T("出票航空公司：</span><span.*?</span></td>"));
	wregex regName(_T("出票代理人：</span><span.*?</span></td>"));
	wregex regAddress(_T("代理人地址：</span><span.*?</span></td>"));
	wregex regTel(_T("电话：</span><span.*?</span></td>"));
	wregex regFax(_T("传真：</span><span.*?</span></td>"));
	
	strData = regex_replace(strData, regCompany, wstring(_T("出票航空公司：</span><span style=\"font-size: 10.5pt; font-family: 宋体\">")) + Global::proxyer.company + wstring(_T("</span></td>")));
	strData = regex_replace(strData, regName, wstring(_T("出票代理人：</span><span style=\"font-size: 10.5pt; font-family: 宋体\">")) + Global::proxyer.name + wstring(_T("</span></td>")));
	strData = regex_replace(strData, regAddress, wstring(_T("代理人地址：</span><span style=\"font-size: 10.5pt; font-family: 宋体\">")) + Global::proxyer.address + wstring(_T("</span></td>")));
	strData = regex_replace(strData, regTel, wstring(_T("电话：</span><span style=\"font-size: 10.5pt; font-family: 宋体\">")) + Global::proxyer.tel + wstring(_T("</span></td>")));
	strData = regex_replace(strData, regFax, wstring(_T("传真：</span><span style=\"font-size: 10.5pt; font-family: 宋体\">")) + Global::proxyer.fax + wstring(_T("</span></td>")));
	}
	__except(Global::MyUnhandledExceptionFilter(GetExceptionInformation()))
	{
		
	}
}